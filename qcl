#!/usr/bin/env sh

# NOTES:
# - Use VNC or QXL/SPICE so qemu can run as another user
# - Must use nomodeset with QXL or DMs may crash on user logout or shutdown

show_help() {
cat <<EndOfHelp
usage: ${0} [- options...]

main options:

      -i                Use IDE disks instead of default VIRTIO
      -m <MiB size>     Specify RAM available to VM
      -p </path/to/img> Primary drive disk image (bootable drive)
      -s </path/to/img> Secondary drive disk image (no boot)
      -v </path/to/img> Secondary drive disk image, VIRTIO forced
                          (Used when you can't use VirtIO to install Windows)
      -k                Enable Win2K hack (solves disk full bug, slows IDE)
      -n <port:port>    Forward host's <port> to guest's <port>
      -u                Use USB mouse instead of tablet device
      -q                Use QXL/SPICE instead of VNC
      -w                Don't launch SPICE/vncviewer directly
      -x                Specify X11 listening port number
      -c                Specify number of cores (default = [cores+1]/2)
      -t <term-bin>     Launch QEMU in <term-bin> in background

Image options:

      -a </path/to/img> Floppy drive disk image
      -b </path/to/iso> Bootable ISO (will boot this instead of primary drive)
      -d </path/to/iso> Seconday ISO (no boot -- for drivers, etc.)

Utilties:

      -r              Chroot into partition (diagnostics, repairs, etc.)
      -f <format>     Format disk image specified by -p
                        Uses MBR partition scheme
                        <format> is [align][MiB] (example: g4096)
                          align is one of n,m,g, or o
                            n = none     partition starts at sector 1
                            m = minimal  partition starts at sector 8
                            g = grub     partition starts at sector 64
                            o = optimal  partition starts at sector 2048
                          MiB is the desired size if -p is not a block device
      -h              This help text.
      -l </dev/drive> List partitions on drive that have no known format.

Notes:

    * GPT partitions of type MBR Parition Scheme are expected.
    * There's no CLI tool to list partition formats, as set in the parition
           table, to stdout.
    * Most tools simply look at the first sector of partitions for the format.
    * Initialization creates an MBR table inside the partition, creates a
          single partition from 1MiB to -1s, formats it ext4, and creates a
          swap file equal to the size specified by -m <MiB size>.
    * Chroot uses losetup to access the partition within the partition
EndOfHelp
}


NFSMT=/mnt/nfs
MOUSE=tablet
XDISP=50
VIDEO="std -nographic -vnc :${XDISP}"
CROOT=false
FRMTP=false
IFACE=virtio
VLNCH=true
CORES=$(( $(( $(getconf _NPROCESSORS_ONLN) + 1)) / 2 ))

while getopts "a:b:c:d:f:hikl:m:n:p:qrs:t:uv:wx:" opt; do
  case "${opt}" in
    a) FDIMG="${OPTARG}"   ;;
    b) BTISO="${OPTARG}"   ;;
    c) CORES="${OPTARG}"   ;;
    d) DRISO="${OPTARG}"   ;;
    f) FRMTO="${OPTARG}"   ; FRMTP=true ;;
    h) show_help; exit 0   ;;
    i) IFACE=ide           ;;
    k) W2KHK="-win2k-hack" ;;
    l) LSPTD="${OPTARG}"   ;;
    m) RAMSZ="${OPTARG}"   ;;
    n) PRTFW="${PRTFW},hostfwd=tcp::$(echo "${OPTARG}" | cut -d: -f1)-:$(echo "${OPTARG}" | cut -d: -f2)" ;;
    p) PRIDR="${OPTARG}"   ;;
    q) VIDEO="qxl -spice port=60${XDISP},disable-ticketing" ;;
    r) CROOT=true          ;;
    s) SCNDR="${OPTARG}"   ;;
    t) TRMNL="${OPTARG}"   ;;
    u) MOUSE="mouse"       ;;
    v) VIODR="${OPTARG}"   ;;
    w) VLNCH=false         ;;
    x) XDISP="${OPTARG}"   ; VIDEO="std -nographic -vnc :${XDISP}" ;;
    '?') show_help >&2 && exit 1;;
  esac
done

shift $((OPTIND-1))

[ -n "${PKEXEC_UID}" ] && SUDO_USER=$(getent passwd "${PKEXEC_UID}" | cut -d: -f1)
[ -z "${SUDO_USER}" ] && echo "Must use sudo or pkexec to run as root." && exit 1

if ${CROOT}; then
  LOOPD="$(sudo losetup -fP --show "${PRIDR}")"
  partprobe # makes sure the kernel gets partition info from losetup
  PTLST="$(lsblk -lno NAME,FSTYPE | grep "$(echo "${LOOPD}" | cut -b 6-)" | grep 'btrfs\|ext\|jfs\|reiser\|xfs' | cut -d\  -f1 | sed ':a;N;$!ba;s/\n/ /g')"
  mkdir -p /mnt/crl
  for CURPT in ${PTLST}; do
    fsck -faMT "/dev/${CURPT}"
    mount -v "/dev/${CURPT}" /mnt/crl
    if [ -f /mnt/crl/etc/fstab ]; then
      break
    else
      umount /mnt/crl
    fi
  done
  mkdir -p "/mnt/crl/${NFSMT}"
  mount -v --bind "${NFSMT}" "/mnt/crl/${NFSMT}"
  if command -v arch-chroot > /dev/null 2>&1; then
    arch-chroot /mnt/crl
  else
    mount -t proc proc /mnt/crl/proc
    mount --rbind /sys /mnt/crl/sys
    mount --rbind /dev /mnt/crl/dev
    mount --rbind /run /mnt/crl/run
    chroot /mnt/crl /bin/sh
    for BNDMNT in proc sys dev run; do
      eval umount -l "/mnt/crl/${BNDMNT}"
    done
  fi
  umount -l "/mnt/crl/${NFSMT}"
  umount -l /mnt/crl
  losetup -d "${LOOPD}"
  exit 0
fi

if [ -n "${LSPTD}" ]; then
  parted "${LSPTD}" unit GB print |
    grep '^[0123456789 ]' |
    grep -v 'ext[234]\|ntfs\|btrfs\|xfs\|fat32\|reiserfs' |
    sed 's/^ //g' |
    sed 's/  */ /g' |
    cut -d\  -f1,4- |
    sed 's/\([[:digit:]]\) \([[:digit:]]\)/\1\t\2/g' |
    sed 's/GB /GB\t/g' |
    sed "s/^/$(echo "${LSPTD}" | cut -b 6-)/g"
  exit 0
fi

if ${FRMTP}; then
  type dcfldd > /dev/null 2>&1 && DDBIN='dcfldd' || DDBIN='dd'
  if [ -b "${PRIDR}" ]; then
    ${DDBIN} if=/dev/zero of="${PRIDR}" bs=1M
  else
    if [ "$(echo "${PRIDR}" | cut -b 1-4)" = "/dev" ]; then
      echo "Block device ${FRMTP} does not exist.  Not creating."
    else
      echo "Writing disk image..."
      ${DDBIN} if=/dev/zero of="${PRIDR}" bs=1M count="$(echo "${FRMTO}" | cut -b 2-)"
    fi
  fi
  echo "Creating partition table..."
  printf "i\n" | sudo parted "${PRIDR}" mklabel msdos
  case $(echo "${FRMTO}" | cut -b 1) in
    n) PSTRT=1s ;;
    m) PSTRT=8s ;;
    g) PSTRT=64s ;;
    o) PSTRT=1MiB ;;
  esac
  printf "i\ni\n" | sudo parted -a none "${PRIDR}" mkpart primary ext4 "${PSTRT}" -- -1s
  [ -b "${PRIDR}" ] && parted "$(echo "${PRIDR}" | cut -b 1-8)" name "$(echo "${PRIDR}" | cut -b 9-)"
  LOOPD="$(sudo losetup -fP --show "${PRIDR}")"
  echo "Creating file system..."
  mkfs -q -t ext4 "${LOOPD}p1"
  mkdir -p /mnt/crl
  mount "${LOOPD}p1" /mnt/crl
  echo "Creating swap file..."
  ${DDBIN} if=/dev/zero of=/mnt/crl/swapfile bs=1M count="${RAMSZ}"
  echo "Cleaning up..."
  umount /mnt/crl
  losetup -d "${LOOPD}"
  exit 0
fi

SDRVS="-drive file='${PRIDR}',index=0,media=disk,cache=none,if=${IFACE}" && BTPRM="-boot c"
[ -b "${PRIDR}" ] && SDRVS="${SDRVS},format=raw"
[ -n "${FDIMG}" ] && SDRVS="${SDRVS} -drive file='${FDIMG}',index=0,if=floppy"
[ -b "${FDIMG}" ] && SDRVS="${SDRVS},format=raw"
[ -n "${SCNDR}" ] && SDRVS="${SDRVS} -drive file='${SCNDR}',index=1,media=disk,cache=none,if=${IFACE}"
[ -b "${SCNDR}" ] && SDRVS="${SDRVS},format=raw"
[ -n "${VIODR}" ] && SDRVS="${SDRVS} -drive file='${VIODR}',index=1,media=disk,cache=none,if=virtio"
[ -b "${VIODR}" ] && SDRVS="${SDRVS},format=raw"
[ -n "${BTISO}" ] && SDRVS="${SDRVS} -drive file='${BTISO}',index=1,media=cdrom" && BTPRM="-boot d"
[ -b "${BTISO}" ] && SDRVS="${SDRVS},format=raw"
[ -n "${DRISO}" ] && SDRVS="${SDRVS} -drive file='${DRISO}',index=2,media=cdrom"
[ -b "${DRISO}" ] && SDRVS="${SDRVS},format=raw"

chown qemu "${PRIDR}"

if ${VLNCH}; then
  case "${VIDEO}" in
    *vnc*)
      bash -c "sleep 1; su -c 'DISPLAY=:0.0 vncviewer :${XDISP}' - ${SUDO_USER}" > /dev/null 2>&1 & ;;
    *qxl*)
      bash -c "sleep 1; su -c 'DISPLAY=:0.0 spicec -h localhost -p 60${XDISP} &> /dev/null' - ${SUDO_USER}" & ;;
  esac
else
  echo "VIDEO MODE: ${VIDEO}"
fi

HTEXT='
>>> USE send_key TO SEND KEY COMBOS TO VM THAT THE HOST GRABS
>>> USE system_powerdown TO SEND ACPI POWER BUTTON SIGNAL TO VM
>>> USE quit TO TELL QEMU TO STOP IMMEDIATELY
>>> PRESS CTRL+C TO FORCE-QUIT QEMU
'

[ -t 1 ] && echo "${HTEXT}"

if [ -n "${TRMNL}" ]; then
  eval "${TRMNL} -e 'echo \"${HTEXT}\"; \
    qemu-system-x86_64 -runas qemu ${W2KHK} -m $RAMSZ \
    -enable-kvm -cpu host -machine type=pc,accel=kvm -smp cores=${CORES} \
    -parallel none -serial none -device usb-ehci -device usb-${MOUSE} \
    -vga $VIDEO -net nic,model=virtio -net user${PRTFW} \
     ${SDRVS} ${BTPRM}' 2> /dev/null" &
  sleep 2
else
  eval "set -x; qemu-system-x86_64 -runas qemu ${W2KHK} -m $RAMSZ\
    -enable-kvm -cpu host -machine type=pc,accel=kvm -smp cores=${CORES} \
    -parallel none -serial none -device usb-ehci -device usb-${MOUSE} \
    -vga $VIDEO -net nic,model=virtio -net user${PRTFW} \
     ${SDRVS} ${BTPRM}; set +x"
fi
