#!/usr/bin/env sh

# NOTES:
# - Use VNC or QXL/SPICE so qemu can run as another user

show_help() {
cat <<EndOfHelp
usage: ${0} [- options...]

System options:

      -c                Specify number of cores (default = [cores+1]/2)
      -e                Boot using UEFI instead of BIOS
      -i                Use IDE disks instead of default VIRTIO
      -l                Use legacy hardware*
      -m <MiB size>     Specify RAM available to VM
      -k                Enable Win2K hack (solves disk full bug, slows IDE)
      -u                Use USB mouse instead of tablet device
      -t <term-bin>     Launch QEMU in <term-bin> in background

    *i440FX + PIIX + Cirrus VGA + AMD PCNet NIC + drives on IDE (no VirtIO)

Image options:

      -a </path/to/img> Floppy drive disk image
      -b </path/to/iso> Bootable ISO (will boot this instead of primary drive)
      -d </path/to/iso> Seconday ISO (no boot -- for drivers, etc.)
      -p </path/to/img> Primary drive disk image (bootable drive)
      -s </path/to/img> Secondary drive disk image (no boot)
      -v </path/to/img> Secondary drive disk image, VIRTIO forced
                          (Used when you can't use VirtIO to install Windows)

Network options:

      -f <port:port>    Forward host's <port> to guest's <port>
      -n                Use AMD PCNet instead of VirtIO

Viewer options:

      The default is to start a VNC host and launch a VNC viewer.

      -g                Use a GTK window (QEMU default)
      -q                Use QXL/SPICE instead of VNC
      -w                Don't launch SPICE/vncviewer directly
      -x                Specify X11 listening port number

Utilties:

      -h              This help text.

EndOfHelp
}

BASE='-nodefaults -parallel none -serial none'
MACHN='type=q35'
KEYBD='-device virtio-keyboard-pci'
MOUSE='-device virtio-tablet-pci'
BALLN='-device virtio-balloon-pci'
XDISP=50
VIDEO='virtio-vga'
DSPLY="vnc=localhost:${XDISP}"
IFACE='virtio'
NTCRD='virtio-net-pci'
VLNCH=true
VCORS=$(( $(( $(getconf _NPROCESSORS_ONLN) + 1)) / 2 ))
FRMWR='BIOS'

QXVSD='-device virtio-serial-pci'
QXVSP='-device virtserialport,chardev=spicechannel0,name=com.redhat.spice.0'
QXCHR='-chardev spicevmc,id=spicechannel0,name=vdagent'

while getopts "a:b:c:d:ef:ghiklm:np:qrs:t:uv:wx:" opt; do
  case "${opt}" in
    a) FDIMG="${OPTARG}"               ;;
    b) BTISO="${OPTARG}"               ;;
    c) VCORS="${OPTARG}"               ;;
    d) DRISO="${OPTARG}"               ;;
    e) FRMWR='UEFI'                    ;;
    f) PRTFW="${PRTFW},hostfwd=tcp::$(echo "${OPTARG}" | cut -d: -f1)-:$(echo "${OPTARG}" | cut -d: -f2)" ;;
    g) DSPLY='gtk'                     ;;
    h) show_help                       ; exit 0    ;;
    i) IFACE='ide'                     ;;
    k) W2KHK='-win2k-hack'             ;;
    l) KEYBD=''; MOUSE=''; NTCRD='pcnet'; IFACE='ide'; BALLN=''; MACHN='type=pc'; VIDEO='cirrus-vga';;
    m) RAMSZ="${OPTARG}"               ;;
    n) NTCRD='pcnet'                   ;;
    p) PRIDR="${OPTARG}"               ;;
    q) VIDEO='qxl-vga' ; DSPLY="spice-app -spice port=60${XPORT},disable-ticketing ${QXVSD} ${QXVSP} ${QXCHR}" ;;
    s) SCNDR="${OPTARG}"               ;;
    t) TRMNL="${OPTARG}"               ;;
    u) MOUSE='-device virtio-mouse-pci';;
    v) VIODR="${OPTARG}"               ;;
    w) VLNCH=false                     ;;
    x) XDISP="${OPTARG}"               ;;
    '?') show_help >&2 && exit 1       ;;
  esac
done

shift $((OPTIND-1))

[ -n "${PKEXEC_UID}" ] && SUDO_USER=$(getent passwd "${PKEXEC_UID}" | cut -d: -f1)
[ -z "${SUDO_USER}" ] && echo "Must use sudo or pkexec to run as root." && exit 1

if [ "${FRMWR}" = "UEFI" ]; then
  UEFI="$(find /usr -type f -name 'OVMF_CODE.fd' | grep '64')"
  case "${UEFI}" in
    *OVMF_CODE.fd) UEFI="-bios ${UEFI}" ;;
    *) echo 'OVMF_CODE.fd not found' && exit 1 ;;
  esac
fi

BTPRM="-boot c"
[ -n "${BTISO}" ] && BTPRM="-boot d"
[ -n "${BTISO}" ] && [ -n "${SCNDR}" -o -n "${VIODR}" ] && BTPRM="-boot e"
[ -n "${FDIMG}" ] && BTPRM="-boot a"

LCV=0
for DRIVE in "${FDIMG}" "${PRIDR}" "${SCNDR}" "${VIODR}" "${BTISO}" "${DRISO}"; do
  LCV=$((LCV+1))
  if [ -n "${DRIVE}" ]; then
    case ${LCV} in
      1) DRVID="fd0"; MTYPE="floppy"; DRVIF="floppy"; IFSLT="bus=0,unit=0";;
      2) DRVID="hd0"; MTYPE="disk"; DRVIF="${IFACE}"; [ "${IFACE}" = "ide" ] && IFSLT="bus=0,unit=0" || IFSLT="";;
      3) DRVID="hd1"; MTYPE="disk"; DRVIF="${IFACE}"; [ "${IFACE}" = "ide" ] && IFSLT="bus=0,unit=1" || IFSLT="";;
      4) DRVID="vd1"; MTYPE="disk"; DRVIF="${IFACE}"; [ "${IFACE}" = "ide" ] && IFSLT="bus=0,unit=1" || IFSLT="";;
      5) DRVID="cd0"; MTYPE="cdrom"; DRVIF="${IFACE}"; [ "${IFACE}" = "ide" ] && IFSLT="bus=1,unit=0" || IFSLT=""; [ "${IFACE}" = "virtio" ] && DRVIF="scsi";;
      6) DRVID="cd1"; MTYPE="cdrom"; DRVIF="${IFACE}"; [ "${IFACE}" = "ide" ] && IFSLT="bus=1,unit=0" || IFSLT=""; [ "${IFACE}" = "virtio" ] && DRVIF="scsi";;
    esac

    SDRVS="${SDRVS} -drive id=${DRVID},media=${MTYPE},file=${DRIVE},cache=none,if=${DRVIF}"
    [ -n "${IFSLT}" ] && SDRVS="${SDRVS},${IFSLT}"
    echo "${DRIVE}" | grep -q '[\.img\|\.iso]$' > /dev/null && SDRVS="${SDRVS},format=raw"
    chown qemu ${DRIVE}
  fi
done

case "$(uname)" in
  Linux)
    ACCEL='-enable-kvm'
    MACHN="${MACHN},accel=kvm"
    VNCMD="vncviewer :${XPORT}"
    ;;
  Darwin)
    MACHN="${MACHN},accel=hvf"
    VNCMD="open vnc://localhost:59${XPORT}"
    ;;
esac

case "$((VCORS % 2))" in
  0) THRDS=2 ;;
  1) THRDS=1 ;;
esac

PCORS="$((VCORS / THRDS))"

if [ -n "${BTISO}" -o -n "${DRISO}" ] && [ "${IFACE}" = "virtio" ]; then
  VSCSI="-device virtio-scsi-pci,id=scsi0"
  [ -n "${BTISO}" ] && VSCSI="${VSCSI} -device scsi-cd,bus=scsi0.0,drive=cd0"
  [ -n "${DRISO}" ] && VSCSI="${VSCSI} -device scsi-cd,bus=scsi0.1,drive=cd1"
fi

if ${VLNCH}; then
  case "${DSPLY}" in
    *vnc*)
      sh -c "sleep 1; su -c \"DISPLAY=${DISPLAY} ${VNCMD}\" - ${SUDO_USER}" > /dev/null 2>&1 & ;;
#   *spice*)
#     command -v spicy > /dev/null 2>&1 && CMMND="spicy -h localhost -p 60${XPORT}"
#     command -v remote-viewer > /dev/null 2>&1 && CMMND="remote-viewer spice://localhost:60${XPORT}"
#     sh -c "sleep 1; su -c 'DISPLAY=${DISPLAY} ${CMMND} > /dev/null 2>&1' - ${SUDO_USER}" & ;;
  esac
else
  echo "VIDEO MODE: ${VIDEO}"
fi

TMPFL="$(mktemp)"

printf '\n>>> USE send_key TO SEND KEY COMBOS TO VM THAT THE HOST GRABS
>>> USE system_powerdown TO SEND ACPI POWER BUTTON SIGNAL TO VM
>>> USE quit TO TELL QEMU TO STOP IMMEDIATELY
>>> PRESS CTRL+C TO FORCE-QUIT QEMU\n\n' > "${TMPFL}"

QCMND="qemu-system-x86_64 -runas qemu ${ACCEL} ${UEFI} -m ${RAMSZ} \
  -machine ${MACHN} ${BASE} ${W2KHK} -cpu host,+topoext \
  -smp cores=${VCORS},sockets=1,cores=${PCORS},threads=${THRDS} \
  -monitor stdio -device ${VIDEO} -display ${DSPLY} \
  -nic user,model=${NTCRD}${PRTFW} \
  ${KEYBD} ${MOUSE} ${BALLN} \
  ${SDRVS} ${VSCSI} ${BTPRM}"


if [ -n "${TRMNL}" ]; then
  set -x
  ${TRMNL} -e "${QCMND}" &
  sleep 2
else
  [ -t 1 ] && cat "${TMPFL}"
  eval "set -x; ${QCMND}"
fi

rm "${TMPFL}"
